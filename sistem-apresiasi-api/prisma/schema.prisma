generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  npm            String             @unique
  email          String             @unique
  phoneNumber    String?            @unique
  password       String
  name           String
  faculty        String?
  major          String?
  statusActive   UserStatusActive
  statusGraduate UserStatusGraduate
  role           String

  activities       Activity[]
  Recognitions     Achievement[]
  RejectedActivity RejectedActivity[]
  Skpi             Skpi[]
}

enum UserStatusActive {
  AKTIF
  TIDAK_AKTIF
}

enum UserStatusGraduate {
  LULUS
  BELUM_LULUS
}

model Admin {
  id      String  @id @default(cuid())
  nip     String  @unique
  name    String
  faculty String?
  major   String?
  role    String
}

model Activity {
  id                      String  @id @default(cuid())
  name                    String?
  fieldsActivity          String
  activity                String
  levels                  String?
  possitions_achievements String?
  locations               String?
  years                   String
  points                  Int
  fileUrl                 String
  status                  String?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  achievements     Achievement[]
  RejectedActivity RejectedActivity[]
}

model Achievement {
  id String @id @default(cuid())

  activityId String   @unique
  activity   Activity @relation(fields: [activityId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
}

model Skpi {
  id                 String @id @default(cuid())
  mandatoryPoints    Int
  charityPoints      Int
  scientificPoints   Int
  talentPoints       Int
  organizationPoints Int
  otherPoints        Int
  status             String

  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id])
}

model RejectedActivity {
  id      String @id @default(cuid())
  message String

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
}

model Authentication {
  id    String @id @default(cuid())
  token String
}

model AchievementIndependent {
  id                 String   @id @default(cuid())
  name               String
  level_activity     String
  participant_type   String
  total_participants Int?
  participants       Json[]
  faculty            String
  major              String
  achievement        String
  mentor             String?
  year               String
  start_date         String?
  end_date           String?
  file_url           String[]

  @@map("achievement_independent")
}

model AchievementNonCompetition {
  id                 String   @id @default(cuid())
  name               String
  category           String
  faculty            String
  activity           String?
  level_activity     String?
  number_of_students Int?
  year               String
  file_url           String[]

  @@map("achievement_non_competition")
}

model OtpCode {
  id         String   @id @unique
  code       String   @unique
  npm        String
  email      String
  isUsed     Boolean
  validUntil DateTime
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}
